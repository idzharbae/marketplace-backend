// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/idzharbae/marketplace-backend/svc/catalog/internal (interfaces: ReviewUC)

// Package ucmock is a generated GoMock package.
package ucmock

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/idzharbae/marketplace-backend/svc/catalog/internal/entity"
	requests "github.com/idzharbae/marketplace-backend/svc/catalog/internal/requests"
	reflect "reflect"
)

// MockReviewUC is a mock of ReviewUC interface.
type MockReviewUC struct {
	ctrl     *gomock.Controller
	recorder *MockReviewUCMockRecorder
}

// MockReviewUCMockRecorder is the mock recorder for MockReviewUC.
type MockReviewUCMockRecorder struct {
	mock *MockReviewUC
}

// NewMockReviewUC creates a new mock instance.
func NewMockReviewUC(ctrl *gomock.Controller) *MockReviewUC {
	mock := &MockReviewUC{ctrl: ctrl}
	mock.recorder = &MockReviewUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewUC) EXPECT() *MockReviewUCMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReviewUC) Create(arg0 entity.Review) (entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockReviewUCMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReviewUC)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockReviewUC) Delete(arg0 entity.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReviewUCMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReviewUC)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockReviewUC) Get(arg0 requests.GetReview) (entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockReviewUCMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReviewUC)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockReviewUC) List(arg0 requests.ListReview) ([]entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockReviewUCMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockReviewUC)(nil).List), arg0)
}

// Update mocks base method.
func (m *MockReviewUC) Update(arg0 entity.Review) (entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockReviewUCMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReviewUC)(nil).Update), arg0)
}
