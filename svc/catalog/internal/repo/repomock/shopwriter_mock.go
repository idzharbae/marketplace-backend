// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/idzharbae/marketplace-backend/svc/catalog/internal (interfaces: ShopWriter)

// Package repomock is a generated GoMock package.
package repomock

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/idzharbae/marketplace-backend/svc/catalog/internal/entity"
	reflect "reflect"
)

// MockShopWriter is a mock of ShopWriter interface
type MockShopWriter struct {
	ctrl     *gomock.Controller
	recorder *MockShopWriterMockRecorder
}

// MockShopWriterMockRecorder is the mock recorder for MockShopWriter
type MockShopWriterMockRecorder struct {
	mock *MockShopWriter
}

// NewMockShopWriter creates a new mock instance
func NewMockShopWriter(ctrl *gomock.Controller) *MockShopWriter {
	mock := &MockShopWriter{ctrl: ctrl}
	mock.recorder = &MockShopWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShopWriter) EXPECT() *MockShopWriterMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockShopWriter) Create(arg0 entity.Shop) (entity.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(entity.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockShopWriterMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockShopWriter)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockShopWriter) Delete(arg0 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockShopWriterMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockShopWriter)(nil).Delete), arg0)
}

// Update mocks base method
func (m *MockShopWriter) Update(arg0 entity.Shop) (entity.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(entity.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockShopWriterMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockShopWriter)(nil).Update), arg0)
}
