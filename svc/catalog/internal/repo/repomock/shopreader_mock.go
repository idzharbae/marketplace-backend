// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/idzharbae/marketplace-backend/svc/catalog/internal (interfaces: ShopReader)

// Package repomock is a generated GoMock package.
package repomock

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/idzharbae/marketplace-backend/svc/catalog/internal/entity"
	requests "github.com/idzharbae/marketplace-backend/svc/catalog/internal/requests"
	reflect "reflect"
)

// MockShopReader is a mock of ShopReader interface
type MockShopReader struct {
	ctrl     *gomock.Controller
	recorder *MockShopReaderMockRecorder
}

// MockShopReaderMockRecorder is the mock recorder for MockShopReader
type MockShopReaderMockRecorder struct {
	mock *MockShopReader
}

// NewMockShopReader creates a new mock instance
func NewMockShopReader(ctrl *gomock.Controller) *MockShopReader {
	mock := &MockShopReader{ctrl: ctrl}
	mock.recorder = &MockShopReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShopReader) EXPECT() *MockShopReaderMockRecorder {
	return m.recorder
}

// GetByID mocks base method
func (m *MockShopReader) GetByID(arg0 int32) (entity.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(entity.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockShopReaderMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockShopReader)(nil).GetByID), arg0)
}

// GetBySlug mocks base method
func (m *MockShopReader) GetBySlug(arg0 string) (entity.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySlug", arg0)
	ret0, _ := ret[0].(entity.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySlug indicates an expected call of GetBySlug
func (mr *MockShopReaderMockRecorder) GetBySlug(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySlug", reflect.TypeOf((*MockShopReader)(nil).GetBySlug), arg0)
}

// List mocks base method
func (m *MockShopReader) List(arg0 requests.ListShop) ([]entity.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]entity.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockShopReaderMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockShopReader)(nil).List), arg0)
}
