// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/idzharbae/marketplace-backend/svc/auth/internal (interfaces: PaymentUC)

// Package ucmock is a generated GoMock package.
package ucmock

import (
	gomock "github.com/golang/mock/gomock"
	authproto "github.com/idzharbae/marketplace-backend/svc/auth/authproto"
	entity "github.com/idzharbae/marketplace-backend/svc/auth/internal/entity"
	request "github.com/idzharbae/marketplace-backend/svc/auth/internal/request"
	reflect "reflect"
)

// MockPaymentUC is a mock of PaymentUC interface.
type MockPaymentUC struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentUCMockRecorder
}

// MockPaymentUCMockRecorder is the mock recorder for MockPaymentUC.
type MockPaymentUCMockRecorder struct {
	mock *MockPaymentUC
}

// NewMockPaymentUC creates a new mock instance.
func NewMockPaymentUC(ctrl *gomock.Controller) *MockPaymentUC {
	mock := &MockPaymentUC{ctrl: ctrl}
	mock.recorder = &MockPaymentUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentUC) EXPECT() *MockPaymentUCMockRecorder {
	return m.recorder
}

// TopUp mocks base method.
func (m *MockPaymentUC) TopUp(arg0 request.TopUp) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopUp", arg0)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopUp indicates an expected call of TopUp.
func (mr *MockPaymentUCMockRecorder) TopUp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopUp", reflect.TypeOf((*MockPaymentUC)(nil).TopUp), arg0)
}

// Transfer mocks base method.
func (m *MockPaymentUC) Transfer(arg0 request.Transfer) (authproto.TransferSaldoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", arg0)
	ret0, _ := ret[0].(authproto.TransferSaldoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockPaymentUCMockRecorder) Transfer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockPaymentUC)(nil).Transfer), arg0)
}

// UpdateSaldo mocks base method.
func (m *MockPaymentUC) UpdateSaldo(arg0 request.TopUp) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSaldo", arg0)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSaldo indicates an expected call of UpdateSaldo.
func (mr *MockPaymentUCMockRecorder) UpdateSaldo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSaldo", reflect.TypeOf((*MockPaymentUC)(nil).UpdateSaldo), arg0)
}
