// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/idzharbae/marketplace-backend/svc/transaction/internal (interfaces: OrderWriter)

// Package repomock is a generated GoMock package.
package repomock

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/idzharbae/marketplace-backend/svc/transaction/internal/entity"
	request "github.com/idzharbae/marketplace-backend/svc/transaction/internal/request"
	reflect "reflect"
)

// MockOrderWriter is a mock of OrderWriter interface.
type MockOrderWriter struct {
	ctrl     *gomock.Controller
	recorder *MockOrderWriterMockRecorder
}

// MockOrderWriterMockRecorder is the mock recorder for MockOrderWriter.
type MockOrderWriterMockRecorder struct {
	mock *MockOrderWriter
}

// NewMockOrderWriter creates a new mock instance.
func NewMockOrderWriter(ctrl *gomock.Controller) *MockOrderWriter {
	mock := &MockOrderWriter{ctrl: ctrl}
	mock.recorder = &MockOrderWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderWriter) EXPECT() *MockOrderWriterMockRecorder {
	return m.recorder
}

// CreateFromCartsAndSubstractCustomerSaldo mocks base method.
func (m *MockOrderWriter) CreateFromCartsAndSubstractCustomerSaldo(arg0 request.CreateOrderReq) ([]entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFromCartsAndSubstractCustomerSaldo", arg0)
	ret0, _ := ret[0].([]entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFromCartsAndSubstractCustomerSaldo indicates an expected call of CreateFromCartsAndSubstractCustomerSaldo.
func (mr *MockOrderWriterMockRecorder) CreateFromCartsAndSubstractCustomerSaldo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFromCartsAndSubstractCustomerSaldo", reflect.TypeOf((*MockOrderWriter)(nil).CreateFromCartsAndSubstractCustomerSaldo), arg0)
}

// UpdateOrderStatusAndAddShopSaldo mocks base method.
func (m *MockOrderWriter) UpdateOrderStatusAndAddShopSaldo(arg0 entity.Order) (entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatusAndAddShopSaldo", arg0)
	ret0, _ := ret[0].(entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderStatusAndAddShopSaldo indicates an expected call of UpdateOrderStatusAndAddShopSaldo.
func (mr *MockOrderWriterMockRecorder) UpdateOrderStatusAndAddShopSaldo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatusAndAddShopSaldo", reflect.TypeOf((*MockOrderWriter)(nil).UpdateOrderStatusAndAddShopSaldo), arg0)
}

// UpdateOrderStatusToOnShipment mocks base method.
func (m *MockOrderWriter) UpdateOrderStatusToOnShipment(arg0, arg1 int64) (entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatusToOnShipment", arg0, arg1)
	ret0, _ := ret[0].(entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderStatusToOnShipment indicates an expected call of UpdateOrderStatusToOnShipment.
func (mr *MockOrderWriterMockRecorder) UpdateOrderStatusToOnShipment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatusToOnShipment", reflect.TypeOf((*MockOrderWriter)(nil).UpdateOrderStatusToOnShipment), arg0, arg1)
}
