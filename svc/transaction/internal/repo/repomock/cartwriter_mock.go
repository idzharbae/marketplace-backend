// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/idzharbae/marketplace-backend/svc/transaction/internal (interfaces: CartWriter)

// Package repomock is a generated GoMock package.
package repomock

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/idzharbae/marketplace-backend/svc/transaction/internal/entity"
	reflect "reflect"
)

// MockCartWriter is a mock of CartWriter interface.
type MockCartWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCartWriterMockRecorder
}

// MockCartWriterMockRecorder is the mock recorder for MockCartWriter.
type MockCartWriterMockRecorder struct {
	mock *MockCartWriter
}

// NewMockCartWriter creates a new mock instance.
func NewMockCartWriter(ctrl *gomock.Controller) *MockCartWriter {
	mock := &MockCartWriter{ctrl: ctrl}
	mock.recorder = &MockCartWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartWriter) EXPECT() *MockCartWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCartWriter) Create(arg0 entity.Cart) (entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCartWriterMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCartWriter)(nil).Create), arg0)
}

// DeleteByID mocks base method.
func (m *MockCartWriter) DeleteByID(arg0, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockCartWriterMockRecorder) DeleteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockCartWriter)(nil).DeleteByID), arg0, arg1)
}

// Update mocks base method.
func (m *MockCartWriter) Update(arg0 entity.Cart) (entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCartWriterMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCartWriter)(nil).Update), arg0)
}
