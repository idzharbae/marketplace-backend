// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/idzharbae/marketplace-backend/svc/transaction/internal (interfaces: CartReader)

// Package repomock is a generated GoMock package.
package repomock

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/idzharbae/marketplace-backend/svc/transaction/internal/entity"
	reflect "reflect"
)

// MockCartReader is a mock of CartReader interface.
type MockCartReader struct {
	ctrl     *gomock.Controller
	recorder *MockCartReaderMockRecorder
}

// MockCartReaderMockRecorder is the mock recorder for MockCartReader.
type MockCartReaderMockRecorder struct {
	mock *MockCartReader
}

// NewMockCartReader creates a new mock instance.
func NewMockCartReader(ctrl *gomock.Controller) *MockCartReader {
	mock := &MockCartReader{ctrl: ctrl}
	mock.recorder = &MockCartReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartReader) EXPECT() *MockCartReaderMockRecorder {
	return m.recorder
}

// GetByIDs mocks base method.
func (m *MockCartReader) GetByIDs(arg0 ...int64) ([]entity.Cart, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByIDs", varargs...)
	ret0, _ := ret[0].([]entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs.
func (mr *MockCartReaderMockRecorder) GetByIDs(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockCartReader)(nil).GetByIDs), arg0...)
}

// ListByUserID mocks base method.
func (m *MockCartReader) ListByUserID(arg0 int64) ([]entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUserID", arg0)
	ret0, _ := ret[0].([]entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUserID indicates an expected call of ListByUserID.
func (mr *MockCartReaderMockRecorder) ListByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUserID", reflect.TypeOf((*MockCartReader)(nil).ListByUserID), arg0)
}
