// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/idzharbae/marketplace-backend/svc/transaction/internal (interfaces: OrderUC)

// Package ucmock is a generated GoMock package.
package ucmock

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/idzharbae/marketplace-backend/svc/transaction/internal/entity"
	request "github.com/idzharbae/marketplace-backend/svc/transaction/internal/request"
	reflect "reflect"
)

// MockOrderUC is a mock of OrderUC interface.
type MockOrderUC struct {
	ctrl     *gomock.Controller
	recorder *MockOrderUCMockRecorder
}

// MockOrderUCMockRecorder is the mock recorder for MockOrderUC.
type MockOrderUCMockRecorder struct {
	mock *MockOrderUC
}

// NewMockOrderUC creates a new mock instance.
func NewMockOrderUC(ctrl *gomock.Controller) *MockOrderUC {
	mock := &MockOrderUC{ctrl: ctrl}
	mock.recorder = &MockOrderUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderUC) EXPECT() *MockOrderUCMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderUC) Create(arg0 entity.Order) (entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrderUCMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderUC)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockOrderUC) Delete(arg0 entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrderUCMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrderUC)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockOrderUC) Get(arg0 entity.Order) (entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOrderUCMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrderUC)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockOrderUC) List(arg0 request.ListOrderReq) ([]entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockOrderUCMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOrderUC)(nil).List), arg0)
}

// Update mocks base method.
func (m *MockOrderUC) Update(arg0 entity.Order) (entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockOrderUCMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrderUC)(nil).Update), arg0)
}
